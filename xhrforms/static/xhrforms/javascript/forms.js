// Generated by CoffeeScript 1.3.3
(function() {
  var $cachedSelects, displayFormErrors, limitSelect;

  $(function() {
    var form, _i, _len, _ref, _results;
    _ref = $('form[data-xhr]');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      form = _ref[_i];
      _results.push((function() {
        var $form, method, type, url;
        $form = $(form);
        type = $form.data('xhr');
        method = $form.attr('method');
        url = $form.attr('action');
        if (type === 'submit') {
          return $form.on('submit', function(e) {
            var xhr;
            e.preventDefault();
            xhr = $.ajax({
              type: method,
              url: url,
              data: $form.serialize(),
              dataType: 'text'
            });
            return xhr.always(function() {
              if (xhr.status === 200) {
                $form.trigger('success', xhr);
                if ($form.data('xhr-success-url')) {
                  return document.location = $form.data('xhr-success-url');
                } else if ($form.data('xhr-success') === 'refresh') {
                  return document.location = document.location.href;
                } else if ($form.data('xhr-success') === 'alert') {
                  $form.find('.alert-saved').hide();
                  $form.find('[type=submit]').after("                  <div class='alert alert-success alert-saved'>Saved</div>");
                  return setTimeout((function() {
                    return $('.alert-saved').fadeOut();
                  }), 7000);
                } else if ($form.data('xhr-success') === 'modal' && $form.data('xhr-modal')) {
                  return $($form.data('xhr-modal')).modal();
                }
              } else if (xhr.status === 500) {

              } else {
                return displayFormErrors($form, JSON.parse(xhr.responseText), true);
              }
            });
          });
        } else if (type === 'blur') {
          return $form.on('blur', '[name]', function(e) {
            var $field, data, xhr;
            e.preventDefault();
            $field = $(this);
            data = {
              'inline_submit': 'true',
              'fields': {}
            };
            data.fields[$field.attr('name')] = $field.attr('value');
            data = JSON.stringify(data);
            xhr = $.ajax({
              type: method,
              url: url,
              data: data,
              dataType: 'text'
            });
            return xhr.always(function() {
              var $control;
              if (xhr.status === 200) {
                $control = $field.closest('.control-group');
                $control.addClass('success');
                $control.find('.help-inline:not(.error)').show();
                return $control.find('.help-inline.error').remove();
              } else {
                $field.closest('.control-group').removeClass('success');
                return displayFormErrors($form, JSON.parse(xhr.responseText).errors, false);
              }
            });
          });
        }
      })());
    }
    return _results;
  });

  displayFormErrors = function($form, errors, remove) {
    var $control, $field, field, name, _i, _j, _len, _len1, _ref, _ref1;
    $form.find('.alert-error').remove();
    if (errors.hasOwnProperty('__all__')) {
      $form.find('.control-group').first().before("<div class='alert alert-error'>" + errors.__all__ + "</div>");
    }
    _ref = $form.find('[name]');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      field = _ref[_i];
      $control = $(field).closest('.control-group');
      $control.removeClass('error');
      $control.find('.help-inline:not(.error)').show();
      $control.find('.help-inline.error').remove();
    }
    _ref1 = $form.find('[name]');
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      field = _ref1[_j];
      $field = $(field);
      name = $field.attr('name');
      $control = $field.closest('.control-group');
      if (errors.hasOwnProperty(name)) {
        $control.removeClass('success');
        $control.addClass('error');
        $field.removeClass('success');
        $field.addClass('error');
        $control.find('.help-inline:not(.error)').hide();
        $control.append("<span class='help-inline error alert alert-error'>" + errors[name] + "</span>");
      }
    }
    return $form.find('[type=submit],input.submit').prop('disabled', false);
  };

  $cachedSelects = {};

  limitSelect = function(limiterName, limiteeName, dataAttr) {
    return function() {
      var limiterVal;
      limiterVal = $("select[name=" + limiterName + "]").val();
      if (!limiterVal) {
        $("select[name=" + limiteeName + "]").replaceWith($cachedSelects[limiteeName].clone());
        return $("select[name=" + limiteeName + "] option").remove();
      } else {
        $("select[name=" + limiteeName + "]").replaceWith($cachedSelects[limiteeName].clone());
        return $("select[name=" + limiteeName + "] option[data-" + dataAttr + "!=" + limiterVal + "]").remove();
      }
    };
  };

  $(function() {
    var $limitee, $limiter, dataAttr, limit, limiteeName, limiterName, select, _i, _len, _ref, _results;
    _ref = $('select[data-dependable]');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      select = _ref[_i];
      $limitee = $(select);
      limiteeName = $limitee.attr('name');
      $cachedSelects[limiteeName] = $("select[name=" + limiteeName + "]").clone();
      _results.push((function() {
        var _ref1, _results1;
        _ref1 = JSON.parse($limitee.data('dependable').replace(/\\"/g, '"'));
        _results1 = [];
        for (limiterName in _ref1) {
          dataAttr = _ref1[limiterName];
          $limiter = $("select[name=" + limiterName + "]");
          limit = limitSelect(limiterName, limiteeName, dataAttr);
          limit();
          _results1.push($limiter.on('change', limit));
        }
        return _results1;
      })());
    }
    return _results;
  });

}).call(this);
